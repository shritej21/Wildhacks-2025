import React, { useState, useEffect } from "react";
import Link from "next/link";
import { useSession, signOut } from "next-auth/react";
import Image from "next/image";
import { useRouter } from "next/navigation";

export function Header() {
  const { data: session, status } = useSession();
  const [showPopup, setShowPopup] = useState(false);
  const router = useRouter();

  const handleSignOut = async () => {
    try {
      if (session?.user?.id) {
        const res = await fetch("/api/deleteUser", {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ id: session.user.id }),
        });
        if (!res.ok) {
          console.error("Failed to delete user");
        }
      }
      await signOut({ redirect: false });
      router.push("/");
    } catch (error) {
      console.error("Error during sign out process:", error);
    }
  };

  return (
    <header className="z-50 w-full border-b border-border/40 ">
      <div className="flex h-16 items-center justify-between">
        <div className="flex items-center gap-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            xmlnsXlink="http://www.w3.org/1999/xlink"
            version="1.1"
            id="Layer_1"
            x="0px"
            y="0px"
            width="50px"
            viewBox="0 0 1024 1024"
            enableBackground="new 0 0 1024 1024"
            xmlSpace="preserve"
          >
            <path
              fill="#000000"
              opacity="1.000000"
              stroke="none"
              d=" M673.722168,681.273438   C707.631226,714.543396 741.332947,747.521545 774.925232,780.610718   C784.930481,790.466064 787.376404,804.763550 781.695984,817.499329   C775.976624,830.322327 764.474304,837.888367 750.898743,837.300903   C741.846863,836.909119 734.325928,832.889465 728.010376,826.443665   C712.853943,810.974426 697.746704,795.455322 682.446655,780.129028   C644.544373,742.161682 606.563049,704.273254 568.554993,666.411804   C565.029846,662.900208 561.538086,658.161133 557.213562,656.977356   C552.768982,655.760620 549.072144,661.247375 545.084229,663.784607   C514.192566,683.439148 480.540894,695.786194 444.204895,699.032776   C372.364655,705.451477 309.824707,684.251648 258.608643,632.634155   C226.498703,600.272583 207.026459,561.028442 197.995453,516.561218   C194.717773,500.422363 193.165314,483.997009 193.750641,467.498901   C195.622482,414.738708 212.280441,367.248962 246.382858,326.713501   C281.487671,284.986511 326.113708,258.684814 379.878784,248.593567   C434.729675,238.298508 486.145905,248.621780 534.131836,276.226318   C563.968567,293.390228 588.608643,316.623199 608.731628,344.587311   C609.692383,345.922363 610.381287,347.500977 612.336975,348.351837   C615.442139,346.896240 617.344788,343.836578 619.717041,341.402283   C649.247925,311.098602 678.647278,280.666473 708.249084,250.432434   C711.631958,246.977310 711.819458,245.061203 708.022034,241.842789   C702.060059,236.789856 696.595337,231.141724 691.015320,225.648895   C684.894043,219.623215 686.250061,212.552002 694.381714,209.665863   C706.011353,205.538269 718.340820,204.323380 730.361023,201.842880   C745.637085,198.690521 761.036194,196.139374 776.350891,193.167221   C788.877869,190.736069 795.204529,195.602524 794.156189,208.393707   C793.263245,219.287842 791.054993,230.081329 789.273315,240.893753   C786.684998,256.601196 784.046326,272.301636 781.233887,287.970001   C780.395325,292.641632 778.718323,297.078156 773.348083,298.512482   C769.156555,299.631958 765.966980,297.860046 763.029663,295.020844   C756.218628,288.437286 749.308167,281.956543 742.059021,275.074280   C736.402100,280.696259 730.964844,285.997589 725.640137,291.409729   C704.492554,312.904724 683.427673,334.481354 662.239380,355.936096   C645.028503,373.363342 627.903870,390.884735 610.343323,407.955231   C590.039795,427.692108 569.450378,447.132172 549.352966,467.086823   C541.054382,475.326538 528.849976,475.030731 518.866821,467.136108   C497.962402,450.604828 477.026886,434.111908 456.238495,417.435730   C452.956451,414.802917 450.916229,414.413818 447.563782,417.571442   C425.252991,438.585297 402.714447,459.357330 380.250244,480.208252   C365.968811,493.464142 351.732361,506.768951 337.389008,519.957520   C329.480438,527.229309 318.895325,527.938782 311.382202,521.951843   C304.070648,516.125488 302.311493,503.878113 307.531891,495.059845   C310.735992,489.647552 315.696655,485.851044 320.146149,481.622406   C343.930145,459.018860 367.769348,436.472992 391.662140,413.984406   C406.216248,400.285675 420.853638,386.674347 435.544586,373.122375   C445.357117,364.070557 455.106110,363.776398 465.544556,372.141632   C485.953766,388.497375 506.292358,404.941132 526.686523,421.315674   C533.115295,426.477295 533.120483,426.395477 539.054749,420.577057   C551.423584,408.449615 563.841919,396.372742 576.217957,384.252686   C581.858887,378.728455 581.860107,378.686432 577.309937,372.338318   C545.963196,328.605377 504.590363,300.350647 451.233826,290.447449   C413.704315,283.481812 377.801544,288.582855 343.197449,304.306549   C304.787445,321.759583 276.128662,349.473297 256.204224,386.485138   C239.225571,418.024841 232.230087,451.939148 235.618591,487.270294   C242.702682,561.134460 280.320526,614.008728 348.328430,644.380798   C366.792145,652.626526 386.478119,656.606018 406.806366,657.996033   C444.095123,660.545959 478.815918,652.479431 511.470184,634.702759   C515.702942,632.398560 519.405396,629.358826 523.311096,625.752197   C518.684998,623.086609 513.814819,623.251038 509.239105,622.366943   C501.999390,620.968201 494.651306,621.451782 487.338684,621.381104   C475.469696,621.266235 469.747681,615.841919 469.700531,603.966858   C469.573486,571.969910 469.604248,539.972168 469.661591,507.974823   C469.678558,498.509979 474.406189,493.739777 483.754669,493.682251   C498.919495,493.588959 514.085754,493.592804 529.250549,493.689911   C537.189331,493.740723 542.895264,498.936676 543.367554,506.892456   C544.553345,526.867737 543.845947,546.866699 543.713440,566.856873   C543.641663,577.686401 543.492859,588.515747 543.491760,599.345215   C543.491516,601.443359 544.014343,603.541443 544.386230,606.312866   C550.121887,602.622742 553.620728,597.722839 557.226624,593.114014   C577.878845,566.717773 590.591370,536.976501 594.837036,503.602264   C596.756287,488.515961 596.565308,473.410217 596.676758,458.281891   C596.758057,447.245087 601.633789,439.257904 610.975830,436.584717   C623.181396,433.092133 635.331360,434.253693 647.000671,439.381927   C650.547791,440.940735 651.528381,443.900818 651.185974,447.607147   C650.179749,458.497345 649.077148,469.384399 648.378418,480.296143   C645.510315,525.083984 632.901184,566.529358 606.556946,603.315735   C601.366638,610.563354 601.192688,610.671509 607.555176,616.893372   C629.472717,638.326599 651.492249,659.655579 673.722168,681.273438  z"
            />
            <path
              fill="#000000"
              opacity="1.000000"
              stroke="none"
              d=" M746.805969,621.386658   C731.504028,621.388733 716.676636,621.412415 701.849304,621.380005   C692.841003,621.360352 688.672119,617.272705 688.669189,608.264343   C688.643860,530.462280 688.644348,452.660187 688.674805,374.858124   C688.678345,365.738068 692.986755,361.051270 702.540039,360.830658   C717.692383,360.480804 732.860413,360.587463 748.018005,360.788696   C754.972961,360.881042 759.274536,365.246704 760.212158,372.323700   C760.407898,373.800812 760.338440,375.317200 760.338562,376.815491   C760.345276,453.784546 760.350403,530.753601 760.342834,607.722656   C760.341919,617.363159 756.758728,621.075378 746.805969,621.386658  z"
            />
            <path
              fill="#000000"
              opacity="1.000000"
              stroke="none"
              d=" M374.162292,621.387817   C365.058624,621.287537 360.800232,617.288635 360.736786,608.584961   C360.602112,590.113220 360.603668,571.639099 360.736145,553.167358   C360.800598,544.185852 365.508118,539.843079 374.534943,539.840942   C389.179932,539.837402 403.824951,539.809814 418.469940,539.823059   C428.196533,539.831848 432.243866,543.735168 432.371765,553.316162   C432.595886,570.105835 432.778778,586.896118 432.913300,603.686707   C432.933197,606.170959 432.745575,608.679932 432.392365,611.139893   C431.413422,617.958252 427.502960,621.351440 420.570038,621.372131   C405.259399,621.417847 389.948547,621.387451 374.162292,621.387817  z"
            />
          </svg>
          <span className="text-4xl text-[#0b57d0] font-bold text-budget-primary">
            Finalyze
          </span>
        </div>
        <div className="relative">
          {status === "authenticated" && session?.user ? (
            <button
              className="flex items-center gap-4"
              onClick={() => setShowPopup(!showPopup)}
            >
              {session.user.image && (
                <Image
                  src={session.user.image}
                  width={40}
                  height={40}
                  alt="Profile"
                  className="rounded-full"
                />
              )}
            </button>
          ) : (
            <Link
              href="/SignIn"
              className="text-sm font-medium bg-budget-primary text-white px-4 py-2 rounded-md"
            >
              Sign In
            </Link>
          )}
          {showPopup && (
            <div className="absolute top-full right-0 mt-2 bg-white shadow-md rounded p-2">
              <button
                onClick={handleSignOut}
                className="w-[max-content] px-2 py-1 text-sm font-medium hover:text-red-500"
              >
                Sign Out
              </button>
            </div>
          )}
        </div>
      </div>
    </header>
  );
}

interface NavLinkProps {
  href: string;
  children: React.ReactNode;
}

function NavLink({ href, children }: NavLinkProps) {
  return (
    <Link
      href={href}
      className="text-sm font-medium transition-colors hover:text-foreground/80"
    >
      {children}
    </Link>
  );
}
